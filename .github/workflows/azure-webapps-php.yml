# This workflow will run PHPUnit tests for the PHP application.
name: PHP CI with PHPUnit Tests

on:
  push:
    branches: [ "main", "feature/*", "docs/*" ] # Run on main and feature/docs branches
  pull_request:
    branches: [ "main" ] # Run on pull requests targeting main
  workflow_dispatch:

env:
  PHP_VERSION: '8.1' # Specify a PHP version, e.g., 8.0, 8.1, 8.2

permissions:
  contents: read # Allows actions/checkout to read the repository content

jobs:
  test:
    name: Run PHPUnit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2 # Use v2 for broader compatibility if needed, or stick to specific commit
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: pdo_sqlite, oci8, openssl # Ensure all required extensions are listed
          tools: composer # Automatically installs composer

      - name: Validate composer.json and composer.lock
        run: composer validate --strict

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest

      # Potentially setup Oracle Instant Client if tests require actual OCI calls
      # This is complex and environment-dependent. For now, assuming tests
      # that need Oracle are skipped or mocked if client is not available.
      # - name: Setup Oracle Instant Client (Example - requires providing client files)
      #   run: |
      #     echo "Oracle Instant Client setup would go here if needed for tests."
      #     # Steps to download and configure LD_LIBRARY_PATH, ORACLE_HOME etc.

      # Setup for application DB (SQLite) - ensure app_data is writable if tests create it
      - name: Create app_data directory for SQLite
        run: mkdir -p app_data && sudo chown -R $USER:$USER app_data
             # The chown might be needed if subsequent steps run as a different user or need specific perms.
             # For PHP running as the workflow user, mkdir should be enough.

      # Setup for Encryption Key for Tests
      # The phpunit.xml.dist refers to TEST_ENCRYPTION_KEY.
      # We can set it here as an environment variable for the test execution step.
      # IMPORTANT: This is a TEST key, not a production key.
      - name: Set Test Encryption Key Environment Variable
        run: echo "TEST_ENCRYPTION_KEY=TestWorkflow_32Byte_EncryptKey01" >> $GITHUB_ENV

      # Run PHPUnit Tests
      # The `composer test` script is defined in composer.json as "phpunit"
      # Assumes app_db_connection.php is modified to use $GLOBALS['TEST_PDO_OVERRIDE'] for integration tests
      # and that initialize_app_db.php is NOT run by tests directly but schema is created in test setup.
      - name: Run PHPUnit tests
        run: composer test
        # Or directly: vendor/bin/phpunit --configuration phpunit.xml.dist
        # (if phpunit.xml is not committed or to force dist usage)

      # Example of uploading test results (optional)
      # - name: Upload Test Results (JUnit format)
      #   if: always() # Run this step even if previous steps fail
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: phpunit-results
      #     path: reports/phpunit.junit.xml # Assuming PHPUnit is configured to output JUnit XML to this path
      #     retention-days: 7

      # Example of uploading coverage report (optional)
      # - name: Upload Coverage Report
      #   if: always()
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: coverage-report
      #     path: coverage-report # Assuming coverage is generated here
      #     retention-days: 7
